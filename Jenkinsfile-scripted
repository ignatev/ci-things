#!groovy

/* The #!groovy above set just for IDE editor
 * Jenkins pipeline groovy DSL https://github.com/jenkinsci/pipeline-plugin/blob/master/TUTORIAL.md */

properties([
        disableConcurrentBuilds(),
        gitLabConnection('git.'),
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '100')),
        parameters([
                booleanParam(defaultValue: false, description: 'Cleanup local gradle cache', name: 'cleanupGradleCache'),
                string(defaultValue: 'mr-build', description: 'builder labels', name: 'builderLabels'),
                string(defaultValue: "", description: 'MR Build Number', name: 'mrNumber'),
                string(defaultValue: "master", description: 'Deployment Tool Version', name: 'deploymentToolVer'),
                string(defaultValue: "dev", description: 'Environment for Deploy & perform Smoke Test', name: 'mrEnv')
        ])
])

def builder = params.builderLabels
def projectDir = 'dir'
def gradleLocalHome = 'gradle_local_home'
def BRANCH_NAME = 'master'

def gradleProxy = "-DproxySet=true"
gradleProxy += " -Dhttp.keepAlive=true -Dhttp.proxyHost=proxy -Dhttp.proxyPort=3128 -Dhttp.nonProxyHosts=localhost\\|127.0.0.1\\|\\*.dev.com"
gradleProxy += " -Dhttps.keepAlive=true -Dhttps.proxyHost=proxy -Dhttps.proxyPort=3128 -Dhttps.nonProxyHosts=localhost\\|127.0.0.1\\|\\*..com"

/**
 * Print to stdout delimiter section with custom message
 */
def delimiter(String str) {
    lineLength = 80
    line = '-' * lineLength + '\n'
    return line * 2 + str.center(lineLength) + '\n' + line * 2
}

def email(mailTo) {
    emailext(to: mailTo,
            mimeType: 'text/html',
            subject: "${JOB_NAME} - Build # ${env.BUILD_NUMBER} ${currentBuild.result}!",
            body: "Check console output at ${env.BUILD_URL} to view the results.")
}

/**
 * Run gradle build, buildTests and tests.
 */
def buildAndTest = {String includeTestGroups = "unit,functional,heavy", String gradleExtraOpts = " ", String jvmOpts = "-Xms1024m -Xmxm" ->
    sh "export GRADLE_USER_HOME=${env.WORKSPACE}/${gradleLocalHome}"
    def gradleCmd = "./gradlew ${gradleProxy} build test jacocoFullReport singleTestReport "
    gradleCmd += "-Dorg.gradle.jvmargs=\'${jvmOpts}\' -Dorg.gradle.caching=false "
    gradleCmd += "-Pcoverage --parallel -PincludeGroups=${includeTestGroups} -Pci-server --no-daemon "
    gradleCmd += "--configure-on-demand --parallel --profile -Dnexus.user=\${NEXUS_USERNAME} -Dnexus.user.password=\${NEXUS_PASSWORD} "
    gradleCmd += "${gradleExtraOpts}"
    withCredentials([usernamePassword(credentialsId: 'nexus_developer',
            passwordVariable: 'NEXUS_PASSWORD',
            usernameVariable: 'NEXUS_USERNAME')]) {
        return sh(returnStdout: true, script: gradleCmd)
    }
}

/**
 * Publish via HTML junit report
 */
def junitReport = { ->
    junit(testResults: '*/*/build/test-results/test/*.xml,*/build/test-results/test/*.xml')

    //publish single tests report for all modules generated by gradle
    publishHTML([allowMissing: false,
                 alwaysLinkToLastBuild: true,
                 keepAll: true,
                 reportDir: './build/reports/allTests',
                 reportFiles: 'index.html',
                 reportName: 'Tests Report',
                 reportTitles: 'Tests Report'])
}

/*
    ----------------------------------- Pipeline -----------------------------------
 */

try {
    stage('Prepare EC2 runner') {
        node(builder) {
            println delimiter("EC2 instance ready")
            sh 'env'
            if (params.cleanupGradleCache) {
                dir(gradleLocalHome) { deleteDir() }
            }
        }
    }

    stage ('Checkout git') {
        node(builder) {
            dir(projectDir) {
                deleteDir()

                String gitBranch = BRANCH_NAME
                String gitRepo = "git@git.ogit"
                String gitCredsId = "jenkins-gitom"
                String gitRefSpec = "+refs/heads/*:refs/remotes/origin/* +refs/merge-requests/*/head:refs/remotes/origin/merge-requests/*"

                checkout changelog: true,
                        poll: true,
                        scm: [$class                           : 'GitSCM',
                              branches                         : [[name: "*/${gitBranch}"]],
                              browser                          : [$class: 'GitLab', repoUrl: 'https://git', version: '8.5'],
                              doGenerateSubmoduleConfigurations: false,
                              extensions                       : [],
                              submoduleCfg                     : [],
                              userRemoteConfigs                : [[credentialsId: gitCredsId, url: gitRepo, refspec: gitRefSpec]]]

                sh "git checkout ${BRANCH_NAME}"
                sh "git merge origin/merge-requests/${params.mrNumber}"
                sh 'git --no-pager log -n 100'
                currentBuild.displayName = "#${params.mrNumber}"
            }
        }
    }

    stage ('Run build') {
        node(builder) {
            dir(projectDir) {
                // Note: if you have an option with spaces, put it in the single quotes
                buildAndTest("unit",
                        "-x test -x jacocoFullReport -x singleTestReport",
                        "-Xms20000m -Xmx20000m")
            }
        }
    }

    stage ('Run tests and make report') {
        node(builder) {
            dir(projectDir) {
                println delimiter('Run tests')
                buildAndTest("unit,functional,heavy",
                        "--stacktrace --max-workers=4>all_test.log",
                        "-Xms20000m -Xmx20000m")
                
            }
        }
    }

    // stage ('Publish artifact') {
    //     node(builder) {
    //         dir(projectDir) {
    //             println delimiter('Publish artifact')
    //             buildAndTest(" ",
    //                     "-Ddocker.image.version=MR" + "${mrNumber}" + " publish --stacktrace -x build -x test -x jacocoFullReport -x singleTestReport>publish_test.log",
    //                     "-Xmx8192m")
    //         }
    //     }
    // }

    // stage ("Deploy MR to ${mrEnv} env") {
    //     node(builder) {
    //         println delimiter('Deploy')

    //         dir(projectDir + "/deploy-tool") {
    //             deleteDir()

"
    //             curlCommand = "curl -Ss -O -v -u \${NEXUS_USERNAME}:\${NEXUS_PASSWORD}"
    //             curlCommand += " https://nexus.com/repository//${packageName}"
    //             curlCommand += " && tar xzvf ${packageName}"

    //             println "Trying to get Deployment tool..."
    //             withCredentials([usernamePassword(credentialsId: 'nexus_developer', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
    //                 return sh(returnStdout: true, script: curlCommand)
    //             }

    //             deployCommand = "chmod u+x *.sh && ./deploy-dev2.sh -e ${mrEnv} -wd ./config -s platform -uc -c -u -v MR" + "${mrNumber}" + " | tee publish_test.log"

    //             println "Trying to run Deploy..."
    //             withCredentials([usernamePassword(credentialsId: 'nexus_developer', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
    //                 return sh(returnStdout: true, script: deployCommand)
    //             }
    //         }
    //     }
    // }

    // stage ("Run smoke tests on ${mrEnv} env") {
    //     node(builder) {
    //         println delimiter('Run smoke tests')

    //         dir(projectDir + "/qa-smoketest") {
    //             deleteDir()

    //             String gitBranch = "master"
    //             String gitRepo = "git@tests.git"
    //             String gitCredsId = "jenkins-git-com"
    //             String gitRefSpec = "+refs/heads/*:refs/remotes/origin/*"

    //             checkout changelog: true,
    //                     poll: true,
    //                     scm: [$class                           : 'GitSCM',
    //                           branches                         : [[name: "*/${gitBranch}"]],
    //                           browser                          : [$class: 'GitLab', repoUrl: 'git', version: '8.5'],
    //                           doGenerateSubmoduleConfigurations: false,
    //                           extensions                       : [],
    //                           submoduleCfg                     : [],
    //                           userRemoteConfigs                : [[credentialsId: gitCredsId, url: gitRepo, refspec: gitRefSpec]]]

    //             sh "git checkout ${gitBranch}"

    //             def testSuite="ci_tests.xml"
    //             sh(returnStdout: true, script: "./gradlew ${gradleProxy} clean test -PtestSuite=${testSuite} -Denv.suffix=${mrEnv} > smoke_test.log")
    //         }
    //     }
    // }

} catch (err) {
    currentBuild.result = 'FAILURE'
    println("Error: " + err.getMessage())
    throw err
} finally {
    try {
        stage('Report Test Results') {
            node(builder) {
                println delimiter('REPORT TEST RESULTS')
                dir(projectDir) {
                    step([$class: 'Publisher', reportFilenamePattern: 'build/testngOutput/**/testng-results.xml'])
                    junitReport
                    archiveArtifacts artifacts: '*_test.log'
                }
            }
        }

        stage('Report Tests Coverage') {
            node(builder) {
                println delimiter('PUBLISH REPORT TESTS COVERAGE')
                dir(projectDir) {
                    jacoco(classPattern: '**/build/classes',
                            execPattern: '**/build/jacoco/**.exec')
                }
            }
        }

        stage('Cleanup') {
            node(builder) {
                println delimiter('CLEANUP')
//todo is it good idea to delete all build data, so there is no possibility to debug failures?
//                dir(projectDir) {
//                    deleteDir()
//                }
            }
        }
    } catch (err) {
        currentBuild.result = 'FAILURE'
        println("Error: " + err.getMessage())
        throw err
    } finally {
        stage('Send email') {
            email(emailextrecipients([
                    [$class: 'CulpritsRecipientProvider'],
                    [$class: 'DevelopersRecipientProvider'],
                    [$class: 'RequesterRecipientProvider']]))
        }
    }
}
